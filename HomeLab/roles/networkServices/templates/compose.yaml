services:

#
#  System Services
#

  portainer:
    container_name: portainer
    image: portainer/portainer-ce:latest
    restart: always
    ports:
      - 9000:9000
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - "{{ docker_dir}}/portainer/data:/data"

  pihole:
    container_name: pihole
    restart: always
    image: pihole/pihole:latest
    ports:
      - "53:53/tcp"
      - "53:53/udp"
      - "8081:80/tcp"
    environment:
      - TZ=Etc/UTC
      - WEBPASSWORD={{ pihole_webpassword }}
    volumes:
      - "{{ docker_dir }}/pihole:/etc/pihole"
      - "{{ docker_dir }}/pihole/dnsmasq.d:/etc/dnsmasq.d"
    networks:
      - NertworkNetwork

  ngnix_rp:
    container_name: ngnix_rp
    image: 'jc21/nginx-proxy-manager:latest'
    restart: always
    ports:
      - '80:80'
      - '81:81'
      - '443:443'
    environment:
      DB_MYSQL_HOST: "mariadb"
      DB_MYSQL_PORT: 3306
      DB_MYSQL_USER: "{{ db_user }}"
      DB_MYSQL_PASSWORD: "{{ db_password }}"
      DB_MYSQL_NAME: "{{ db_name }}"
    volumes:
      - "{{ docker_dir }}/ngnix_rp/data:/data"
      - "{{ docker_dir }}/ngnix_rp/letsencrypt:/etc/letsencrypt"
    networks:
      - NertworkNetwork

  mariadb:
    container_name: mariadb
    restart: always
    image: 'jc21/mariadb-aria:latest'
    environment:
      MYSQL_ROOT_PASSWORD: '{{ db_password }}'
      MYSQL_DATABASE: '{{ db_name }}'
      MYSQL_USER: '{{ db_user }}'
      MYSQL_PASSWORD: '{{ db_password }}'
    volumes:
      - "{{ docker_dir }}/ngnix_rp/mysql:/var/lib/mysql"
    networks:
      - NertworkNetwork

#
#  Authentik
#

  # postgresql:
  #   image: docker.io/library/postgres:16-alpine
  #   container_name: auth-postgresql
  #   restart: unless-stopped
  #   healthcheck:
  #     test: ["CMD-SHELL", "pg_isready -d $${POSTGRES_DB} -U $${POSTGRES_USER}"]
  #     start_period: 20s
  #     interval: 30s
  #     retries: 5
  #     timeout: 5s
  #   volumes:
  #     - "{{ docker_dir }}/authentik/database:/var/lib/postgresql/data"
  #   environment:
  #     POSTGRES_PASSWORD: '{{ auth_db_password }}'
  #     POSTGRES_USER: '{{ auth_db_user }}'
  #     POSTGRES_DB: '{{ auth_db_name }}'

  # redis:
  #   image: docker.io/library/redis:alpine
  #   container_name: auth-redis
  #   command: --save 60 1 --loglevel warning
  #   restart: unless-stopped
  #   healthcheck:
  #     test: ["CMD-SHELL", "redis-cli ping | grep PONG"]
  #     start_period: 20s
  #     interval: 30s
  #     retries: 5
  #     timeout: 3s
  #   volumes:
  #     - "{{ docker_dir }}/authentik/redis:/data"
      
  # authentik:
  #   image: ghcr.io/goauthentik/server:2024.12.2
  #   container_name: authentik
  #   restart: unless-stopped
  #   command: server
  #   environment:
  #     AUTHENTIK_REDIS__HOST: redis
  #     AUTHENTIK_POSTGRESQL__HOST: postgresql
  #     AUTHENTIK_POSTGRESQL__USER: '{{ auth_db_user }}'
  #     AUTHENTIK_POSTGRESQL__NAME: '{{ auth_db_name }}' 
  #     AUTHENTIK_POSTGRESQL__PASSWORD: '{{ auth_db_password }}'
  #     AUTHENTIK_SECRET_KEY: '{{ auth_secret }}'
  #   volumes:
  #     - "{{ docker_dir }}/authentik/media:/media"
  #     - "{{ docker_dir }}/authentik/custom-templates:/templates"
  #   ports:
  #     - "9009:9000"
  #     - "9443:9443"
  #   depends_on:
  #     postgresql:
  #       condition: service_healthy
  #     redis:
  #       condition: service_healthy

  # worker:
  #   image: ghcr.io/goauthentik/server:2024.12.2
  #   container_name: authentik-worker
  #   restart: unless-stopped
  #   command: worker
  #   environment:
  #     AUTHENTIK_REDIS__HOST: redis
  #     AUTHENTIK_POSTGRESQL__HOST: postgresql
  #     AUTHENTIK_POSTGRESQL__USER: '{{ auth_db_user }}'
  #     AUTHENTIK_POSTGRESQL__NAME: '{{ auth_db_name }}' 
  #     AUTHENTIK_POSTGRESQL__PASSWORD: '{{ auth_db_password }}'
  #     AUTHENTIK_SECRET_KEY: '{{ auth_secret }}'
  #   user: root
  #   volumes:
  #     # - /var/run/docker.sock:/var/run/docker.sock
  #     - "{{ docker_dir }}/authentik/media:/media"
  #     - "{{ docker_dir }}/authentik/certs:/certs"
  #     - "{{ docker_dir }}/authentik/custom-templates:/templates"
  #   depends_on:
  #     postgresql:
  #       condition: service_healthy
  #     redis:
  #       condition: service_healthy

#
#  Network
#

networks: 
  NertworkNetwork: